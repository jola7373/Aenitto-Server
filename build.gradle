plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "org.asciidoctor.convert" version "1.5.10"
//	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'java'
}

group = 'com.firefighter'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

//bootJar {
//	dependsOn asciidoctor
//	copy {
//		from "${asciidoctor.outputDir}"
//		into 'BOOT-INF/classes/static/docs'
//	}
//}
repositories {
	mavenCentral()
}

//ext {
//	set('snippetsDir', file("out/generated-snippets"))
//}

jar {
	enabled = false
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.postgresql:postgresql:42.1.4'
	implementation 'org.springframework.boot:spring-boot-starter-security'


	compile('io.jsonwebtoken:jjwt-api:0.11.1')
	runtime('io.jsonwebtoken:jjwt-impl:0.11.1', 'io.jsonwebtoken:jjwt-jackson:0.11.1')

	compileOnly 'org.projectlombok:lombok'
	compile group: 'org.hibernate', name: 'hibernate-core', version: '5.3.7.Final'

	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
//	runtime group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.assertj:assertj-core:3.22.0'
	testImplementation 'org.springframework.security:spring-security-test'

	testImplementation 'com.h2database:h2'

}

//tasks.named('test') {
//	outputs.dir snippetsDir
//	useJUnitPlatform()
//}
//
//tasks.named('asciidoctor') {
//	inputs.dir snippetsDir
//	dependsOn test
//}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}


task copyDocument(type: Copy) {
	dependsOn asciidoctor

	from file("${asciidoctor.outputDir}/html5/")
	into file("src/main/resources/static/docs")
}

bootJar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}/html5") {
		into "static/docs"
	}
}

build {
	dependsOn copyDocument
}






//test {
//	// 위에서 작성한 snippetsDir 디렉토리를 test의 output으로 구성하는 설정 -> 스니펫 조각들이 build/generated-snippets로 출력
//	outputs.dir snippetsDir
//	useJUnitPlatform()
//}
//
//asciidoctor { // asciidoctor 작업 구성
//	dependsOn test // test 작업 이후에 작동하도록 하는 설정
//	configurations 'asciidoctorExtensions' // 위에서 작성한 configuration 적용
//	inputs.dir snippetsDir // snippetsDir 를 입력으로 구성
//
//	// source가 없으면 .adoc파일을 전부 html로 만들어버림
//	// source 지정시 특정 adoc만 HTML로 만든다.
//	sources{
//		include("**/index.adoc","**/common/*.adoc")
//	}
//
//	// 특정 .adoc에 다른 adoc 파일을 가져와서(include) 사용하고 싶을 경우 경로를 baseDir로 맞춰주는 설정입니다.
//	// 개별 adoc으로 운영한다면 필요 없는 옵션입니다.
//	baseDirFollowsSourceFile()
//}
//
//// static/docs 폴더 비우기
//asciidoctor.doFirst {
//	delete file('src/main/resources/static/docs')
//}
//
//// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
//task copyDocument(type: Copy) {
//	dependsOn asciidoctor
//	from file("build/docs/asciidoc")
//	into file("src/main/resources/static/docs")
//}
//
//// build 의 의존작업 명시
//build {
//	dependsOn copyDocument
//}
